package amc.view.comp;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.time.DayOfWeek;
import java.time.Period;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAdjusters;
import java.util.function.Consumer;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.TableColumnModelEvent;
import javax.swing.event.TableColumnModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumnModel;

public class CalendarDialog extends javax.swing.JDialog {
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(CalendarDialog.class.getName());
    private Consumer<LocalDate> $outHandle;
    private LocalDate $currentDate;
    private int $startOffset = 0;
    private int $endOffset   = 42;
    private boolean $isMachine = false;

    public void set$outHandle(Consumer<LocalDate> $outHandle) {
        this.$outHandle = $outHandle;
    }

    public LocalDate get$currentDate() {
        return this.$currentDate;
    }

    public void set$currentDate(LocalDate $currentDate) {
        this.$currentDate = $currentDate;
        this.switchCalendar();
        this.selectDay();
    }

    /**
     * Creates new form CalendarDialog
     */
    public CalendarDialog(java.awt.Frame parent, LocalDate $startDate, Consumer<LocalDate> $outHandle) {
        super(parent, false);
        initComponents();

        DefaultTableCellRenderer headRender = new DefaultTableCellRenderer();
        DefaultTableCellRenderer grayRender = new DefaultTableCellRenderer();
        DefaultTableCellRenderer bodyRender = new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(
                JTable  table,
                Object  value,
                boolean isSelected,
                boolean hasFocus,
                int     row,
                int     column
            ) {
                int offset = row * 7 + column;
                if (CalendarDialog.this.$startOffset <= offset && offset < CalendarDialog.this.$endOffset) {
                    return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                }
                return grayRender.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            }
        };
        headRender.setHorizontalAlignment(SwingConstants.CENTER);
        headRender.setBackground(Color.decode("#008b8b"));
        headRender.setForeground(Color.white);
        grayRender.setHorizontalAlignment(SwingConstants.CENTER);
        grayRender.setBackground(Color.decode("#cccccc"));
        grayRender.setForeground(Color.decode("#666666"));
        bodyRender.setHorizontalAlignment(SwingConstants.CENTER);
        bodyRender.setBackground(Color.decode("#f5fdfd"));

        TableColumnModel colModel = this.jTable1.getColumnModel();
        for (int col = 0; col < colModel.getColumnCount(); col++) {
            colModel.getColumn(col).setCellRenderer(bodyRender);
            colModel.getColumn(col).setHeaderRenderer(headRender);
        }

        this.jTable1.getSelectionModel().addListSelectionListener(this::jTable1ListSelection);
        this.jTable1.getColumnModel().addColumnModelListener(new TableColumnModelListener() {
            @Override
            public void columnAdded(TableColumnModelEvent e) {}
            @Override
            public void columnRemoved(TableColumnModelEvent e) {}
            @Override
            public void columnMoved(TableColumnModelEvent e) {}
            @Override
            public void columnMarginChanged(ChangeEvent e) {}
            @Override
            public void columnSelectionChanged(ListSelectionEvent e) {
                CalendarDialog.this.jTable1ListSelection(e);
            }
            
        });

        this.$outHandle = $outHandle;
        this.set$currentDate($startDate);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Calendar");
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));
        java.awt.GridBagLayout jPanel2Layout = new java.awt.GridBagLayout();
        jPanel2Layout.rowHeights = new int[] {50, 0, 50};
        jPanel2Layout.columnWeights = new double[] {1.0};
        jPanel2Layout.rowWeights = new double[] {0.0, 1.0, 0.0};
        jPanel2.setLayout(jPanel2Layout);

        jPanel1.setOpaque(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(400, 50));
        java.awt.GridBagLayout jPanel1Layout = new java.awt.GridBagLayout();
        jPanel1Layout.columnWidths = new int[] {50, 0, 50};
        jPanel1Layout.columnWeights = new double[] {0.0, 1.0, 0.0};
        jPanel1Layout.rowWeights = new double[] {1.0};
        jPanel1.setLayout(jPanel1Layout);

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("⮜");
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("February 2025");
        jPanel1.add(jLabel2, new java.awt.GridBagConstraints());

        jLabel5.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("⮞");
        jLabel5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel1.add(jLabel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        jPanel2.add(jPanel1, gridBagConstraints);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setDoubleBuffered(true);
        jScrollPane1.setHorizontalScrollBar(null);

        jTable1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setCellSelectionEnabled(true);
        jTable1.setMaximumSize(new java.awt.Dimension(2147483647, 32767));
        jTable1.setMinimumSize(new java.awt.Dimension(105, 400));
        jTable1.setPreferredSize(new java.awt.Dimension(525, 400));
        jTable1.setRowHeight(40);
        jTable1.setSelectionBackground(new java.awt.Color(0, 102, 102));
        jTable1.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.setShowGrid(false);
        jTable1.getTableHeader().setResizingAllowed(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jTable1AncestorResized(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
            jTable1.getColumnModel().getColumn(6).setResizable(false);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel2.add(jScrollPane1, gridBagConstraints);

        jButton1.setBackground(new java.awt.Color(245, 253, 253));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(51, 51, 51));
        jButton1.setText("OK");
        jButton1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 139, 139), 2, true));
        jButton1.setFocusPainted(false);
        jButton1.setMaximumSize(new java.awt.Dimension(120, 40));
        jButton1.setMinimumSize(new java.awt.Dimension(120, 40));
        jButton1.setPreferredSize(new java.awt.Dimension(120, 40));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(jButton1, gridBagConstraints);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jTable1AncestorResized
        // TODO add your handling code here:
        int paneH    = Math.max(this.jTable1.getParent().getSize().height, 100);
        int rowCount = this.jTable1.getRowCount();
        this.jTable1.setPreferredSize(new Dimension(0, paneH));
        this.jTable1.setRowHeight(paneH / rowCount);
    }//GEN-LAST:event_jTable1AncestorResized

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
        this.$currentDate = this.$currentDate.minusYears(1);
        this.switchCalendar();
        this.selectDay();
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        // TODO add your handling code here:
        this.$currentDate = this.$currentDate.plusYears(1);
        this.switchCalendar();
        this.selectDay();
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        if (this.$outHandle != null) this.$outHandle.accept(this.$currentDate);
        this.dispose();
    }//GEN-LAST:event_jButton1MouseClicked

    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_formWindowLostFocus

    private void jTable1ListSelection(javax.swing.event.ListSelectionEvent evt) {
        if (evt.getValueIsAdjusting() || this.$isMachine) return;
        int selectedWeek = this.jTable1.getSelectedRow();
        int selectedDay  = this.jTable1.getSelectedColumn();
        if (selectedDay == -1 || selectedWeek == -1) return;

        int selectedDate = (int) this.jTable1.getValueAt(selectedWeek, selectedDay);
        int offset = selectedWeek * 7 + selectedDay;
        boolean out_of_start = offset <  this.$startOffset;
        boolean out_of_end   = offset >= this.$endOffset;

        this.$currentDate =
            out_of_start ? this.$currentDate.minusMonths(1):
            out_of_end   ? this.$currentDate.plusMonths(1) :
            this.$currentDate;
        this.$currentDate = this.$currentDate.withDayOfMonth(selectedDate);

        if (out_of_start || out_of_end) {
            this.switchCalendar();
            this.selectDay();
        }
    }

    private void switchCalendar() {
        this.jLabel2.setText(this.$currentDate.format(DateTimeFormatter.ofPattern("MMMM yyyy")));

        LocalDate dayOne   = this.$currentDate.withDayOfMonth(1);
        LocalDate dayStart = dayOne.with(TemporalAdjusters.previous(DayOfWeek.MONDAY));
        this.$startOffset  = (int) Period.between(dayStart, dayOne).getDays();
        this.$endOffset    = this.$startOffset + dayOne.lengthOfMonth();

        for (int week = 0; week < 6; week++) {
            for (int day = 0; day < 7; day++) {
                this.jTable1.setValueAt((Number) dayStart.getDayOfMonth(), week, day);
                dayStart = dayStart.plusDays(1);
            }
        }
    }

    private void selectDay() {
        int target = this.$currentDate.getDayOfMonth() + this.$startOffset - 1;

        this.$isMachine = true;
        this.jTable1.changeSelection(target / 7, target % 7, false, false);
        this.$isMachine = false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                CalendarDialog dialog = new CalendarDialog(new javax.swing.JFrame(), LocalDate.now(), null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
